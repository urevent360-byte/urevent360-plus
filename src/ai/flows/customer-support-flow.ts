
'use server';
/**
 * @fileOverview A customer support and sales AI agent for UREVENT 360 PLUS.
 *
 * - continueConversation - A function that continues a conversation with the AI.
 * - ConversationInput - The input type for the continueConversation function.
 * - ConversationOutput - The return type for the continueConversation function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';
import { MessageData } from 'genkit';
import { createLeadAction } from '@/app/app/events/new/actions';
import { getSystemPromptAction, getSystemPromptEsAction } from '@/app/admin/content/prompts/actions';


const LeadSchema = z.object({
  fullName: z.string().describe("Client’s full name"),
  phone: z.string().describe("Client phone with country/area code"),
  services: z.array(z.string()).describe("List of service IDs or names from SERVICES_CATALOG"),
  eventDate: z.string().describe("Date in ISO or natural language"),
  location: z.string().describe("City/State or ZIP code"),
  notes: z.string().optional().describe("Any extra preferences captured during chat"),
});

const serviceIdMap: Record<string, string> = {
    '360 photo booth': '360_booth',
    'magic mirror': 'magic_mirror',
    'photo booth printer': 'printer_booth',
    'led robot (co₂, props)': 'led_robot',
    'two carnival stilt walkers': 'carnival_stilts_double',
    'circus-theme welcome': 'circus_welcome',
    'brazilian carnival + one stilt walker': 'brazil_carnival_plus_stilt',
    'hora loca deluxe': 'hora_loca_deluxe',
    'big-head characters / extra dancers': 'big_head_characters',
    'champagne dress hostess': 'champagne_hostess',
    'welcome bridgerton style': 'bridgerton_welcome',
    'cold sparklers': 'cold_sparklers',
    'dance on the clouds': 'dance_on_clouds',
    'snow effect': 'snow_effect',
    'led screen walls (video wall)': 'led_video_wall',
    'high-quality projector': 'hq_projector',
    'custom monogram projector': 'monogram_projector',
    'led tunnel & neon tube installations': 'led_tunnel',
};

const getCanonicalServiceId = (serviceName: string): string => {
    const lowerCaseName = serviceName.toLowerCase().trim();
    // Direct match for canonical ID
    if (Object.values(serviceIdMap).includes(lowerCaseName)) {
        return lowerCaseName;
    }
    // Match for full service name
    if (serviceIdMap[lowerCaseName]) {
        return serviceIdMap[lowerCaseName];
    }
    // Fallback for partial matches or slight variations
    const bestMatch = Object.keys(serviceIdMap).find(key => lowerCaseName.includes(key) || key.includes(lowerCaseName));
    if (bestMatch) {
        return serviceIdMap[bestMatch];
    }
    // Final fallback: generate a slug-like ID
    return lowerCaseName.replace(/\s+/g, '_');
};


const createLeadTool = ai.defineTool(
    {
        name: 'createLead',
        description: 'Create a new sales lead in the CRM when all five fields are collected.',
        inputSchema: LeadSchema,
        outputSchema: z.object({ success: z.boolean(), message: z.string() }),
    },
    async (input) => {
        console.log(`AI is creating a lead with input:`, input);
        
        const serviceObjects = input.services.map(serviceName => ({
            serviceId: getCanonicalServiceId(serviceName),
            title: serviceName,
            qty: 1,
            notes: 'Generated by AI Assistant'
        }));

        try {
            const result = await createLeadAction({
                hostEmail: `lead-via-ai-${Date.now()}@urevent360.com`, 
                name: input.fullName,
                type: 'AI Lead',
                guestCount: 1,
                date: new Date(input.eventDate),
                timeWindow: 'To be determined',
                venueName: input.location,
                address: input.location,
                city: input.location,
                state: '',
                zip: '',
                onsiteContactName: input.fullName,
                onsiteContactPhone: input.phone,
                notes: input.notes || `Lead generated by AI assistant. Services of interest: ${input.services.join(', ')}`,
                requestedServices: serviceObjects,
            });
            return { success: result.success, message: result.message || (result.success ? 'Lead created successfully.' : 'Failed to create lead.')};
        } catch (error) {
            console.error('Error creating lead from AI tool:', error);
            const errorMessage = error instanceof Error ? error.message : 'An internal error occurred.';
            return { success: false, message: errorMessage };
        }
    }
);


const ConversationInputSchema = z.object({
  messages: z.array(
    z.object({
      role: z.enum(['user', 'model']),
      content: z.array(z.object({ text: z.string() })),
    })
  ).describe('A history of messages in the conversation.'),
});
export type ConversationInput = z.infer<typeof ConversationInputSchema>;

const ConversationOutputSchema = z.string().describe("The AI's response.");
export type ConversationOutput = z.infer<typeof ConversationOutputSchema>;

// Helper function to detect language from messages
const detectLanguage = (messages: MessageData[]): 'en' | 'es' => {
    const spanishKeywords = ['hola', 'gracias', 'evento', 'precio', 'servicio', 'ayuda'];
    const userText = messages
        .filter(m => m.role === 'user')
        .map(m => m.content.map(c => c.text || '').join(' '))
        .join(' ')
        .toLowerCase();
    
    for (const keyword of spanishKeywords) {
        if (userText.includes(keyword)) {
            return 'es';
        }
    }
    return 'en';
}

export async function continueConversation(messages: MessageData[]): Promise<ConversationOutput> {
  return customerSupportFlow(messages);
}

const customerSupportFlow = ai.defineFlow(
  {
    name: 'customerSupportFlow',
    inputSchema: z.any(),
    outputSchema: z.string(),
  },
  async (messages) => {
    
    const lang = detectLanguage(messages);
    const systemPromptResult = lang === 'es' 
        ? await getSystemPromptEsAction()
        : await getSystemPromptAction();

    const systemPromptText = systemPromptResult.prompt;

    if (!systemPromptText) {
        return "I'm sorry, my instructions are not configured correctly. Please contact support.";
    }
    
    const prompt = ai.definePrompt({
        name: `customerSupportPrompt-${lang}`,
        system: systemPromptText,
        tools: [createLeadTool],
    });

    const { output } = await prompt(messages);
    return output?.text || "I'm sorry, I'm having trouble responding right now. Please try again in a moment.";
  }
);
