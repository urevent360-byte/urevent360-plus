'use server';
/**
 * @fileOverview A customer support and sales AI agent for UREVENT 360 PLUS.
 *
 * - continueConversation - A function that continues a conversation with the AI.
 * - ConversationInput - The input type for the continueConversation function.
 * - ConversationOutput - The return type for the continueConversation function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';
import { MessageData } from 'genkit';
import { createLeadAction } from '@/app/app/events/new/actions';
import { getSystemPrompt } from '@/lib/data-adapter';


const LeadSchema = z.object({
  name: z.string().describe("The user's full name."),
  phone: z.string().describe("The user's phone number."),
  services: z.array(z.string()).describe('The list of services the user is interested in.'),
  eventDate: z.string().describe("The date of the event in 'YYYY-MM-DD' format."),
  location: z.string().describe("The city and state, or ZIP code of the event location."),
});

const createLeadTool = ai.defineTool(
    {
        name: 'createLead',
        description: 'Use this tool to create a lead once you have gathered all the required information from the user (name, phone, services, eventDate, and location).',
        inputSchema: LeadSchema,
        outputSchema: z.object({ success: z.boolean(), message: z.string() }),
    },
    async (input) => {
        console.log(`AI is creating a lead with input:`, input);
        
        // This tool acts as a bridge to your existing server action.
        // It reformats the data from the AI's understanding to what your action expects.
        const serviceObjects = input.services.map(serviceName => ({
            serviceId: serviceName.toLowerCase().replace(/\s+/g, '-'),
            title: serviceName,
            qty: 1,
            notes: 'Generated by AI Assistant'
        }));

        try {
            const result = await createLeadAction({
                hostEmail: `lead-via-ai@urevent360.com`, // A placeholder email
                name: input.name,
                type: 'AI Lead', // Default event type
                guestCount: 1, // Default guest count
                date: new Date(input.eventDate),
                timeWindow: 'To be determined',
                venueName: input.location,
                address: input.location,
                city: input.location,
                state: '',
                zip: '',
                onsiteContactName: input.name,
                onsiteContactPhone: input.phone,
                notes: `Lead generated by AI assistant. Services of interest: ${input.services.join(', ')}`,
                requestedServices: serviceObjects,
            });
            return result;
        } catch (error) {
            console.error('Error creating lead from AI tool:', error);
            return { success: false, message: 'An internal error occurred.' };
        }
    }
);


const ConversationInputSchema = z.object({
  messages: z.array(
    z.object({
      role: z.enum(['user', 'model']),
      content: z.array(z.object({ text: z.string() })),
    })
  ).describe('A history of messages in the conversation.'),
});
export type ConversationInput = z.infer<typeof ConversationInputSchema>;

const ConversationOutputSchema = z.string().describe("The AI's response.");
export type ConversationOutput = z.infer<typeof ConversationOutputSchema>;

export async function continueConversation(messages: MessageData[]): Promise<ConversationOutput> {
  return customerSupportFlow(messages);
}

const customerSupportFlow = ai.defineFlow(
  {
    name: 'customerSupportFlow',
    inputSchema: z.any(),
    outputSchema: z.string(),
  },
  async (messages) => {
    // Dynamically fetch the latest system prompt
    const systemPromptText = await getSystemPrompt();
    
    const prompt = ai.definePrompt({
        name: 'customerSupportPrompt',
        system: systemPromptText,
        tools: [createLeadTool],
    });

    const { output } = await prompt(messages);
    return output?.text || "I'm sorry, I'm having trouble responding right now. Please try again in a moment.";
  }
);
