
'use server';
/**
 * @fileOverview A customer support and sales AI agent for UREVENT 360 PLUS.
 *
 * - continueConversation - A function that continues a conversation with the AI.
 * - ConversationInput - The input type for the continueConversation function.
 * - ConversationOutput - The return type for the continueConversation function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';
import { MessageData } from 'genkit';
import { createLeadAction } from '@/app/app/events/new/actions';
import { getSystemPromptAction, getSystemPromptEsAction } from '@/app/admin/content/prompts/actions';


const LeadSchema = z.object({
  fullName: z.string().describe("Clientâ€™s full name"),
  phone: z.string().describe("Client phone with country/area code"),
  services: z.array(z.string()).describe("List of service IDs or names from SERVICES_CATALOG"),
  eventDate: z.string().describe("Date in ISO or natural language"),
  location: z.string().describe("City/State or ZIP code"),
  notes: z.string().optional().describe("Any extra preferences captured during chat"),
});

const createLeadTool = ai.defineTool(
    {
        name: 'createLead',
        description: 'Create a new sales lead in the CRM when all five fields are collected.',
        inputSchema: LeadSchema,
        outputSchema: z.object({ success: z.boolean(), message: z.string() }),
    },
    async (input) => {
        console.log(`AI is creating a lead with input:`, input);
        
        // This tool acts as a bridge to your existing server action.
        // It reformats the data from the AI's understanding to what your action expects.
        const serviceObjects = input.services.map(serviceName => ({
            serviceId: serviceName.toLowerCase().replace(/\s+/g, '-'),
            title: serviceName,
            qty: 1,
            notes: 'Generated by AI Assistant'
        }));

        try {
            // Using a placeholder email, as the AI might not always get a real one.
            // The user's actual email will be part of the follow-up.
            const result = await createLeadAction({
                hostEmail: `lead-via-ai-${Date.now()}@urevent360.com`, 
                name: input.fullName,
                type: 'AI Lead', // Default event type
                guestCount: 1, // Default guest count, to be confirmed by sales
                date: new Date(input.eventDate),
                timeWindow: 'To be determined',
                venueName: input.location,
                address: input.location,
                city: input.location,
                state: '',
                zip: '',
                onsiteContactName: input.fullName,
                onsiteContactPhone: input.phone,
                notes: input.notes || `Lead generated by AI assistant. Services of interest: ${input.services.join(', ')}`,
                requestedServices: serviceObjects,
            });
            return { success: result.success, message: result.message || (result.success ? 'Lead created successfully.' : 'Failed to create lead.')};
        } catch (error) {
            console.error('Error creating lead from AI tool:', error);
            const errorMessage = error instanceof Error ? error.message : 'An internal error occurred.';
            return { success: false, message: errorMessage };
        }
    }
);


const ConversationInputSchema = z.object({
  messages: z.array(
    z.object({
      role: z.enum(['user', 'model']),
      content: z.array(z.object({ text: z.string() })),
    })
  ).describe('A history of messages in the conversation.'),
});
export type ConversationInput = z.infer<typeof ConversationInputSchema>;

const ConversationOutputSchema = z.string().describe("The AI's response.");
export type ConversationOutput = z.infer<typeof ConversationOutputSchema>;

// Helper function to detect language from messages
const detectLanguage = (messages: MessageData[]): 'en' | 'es' => {
    const spanishKeywords = ['hola', 'gracias', 'evento', 'precio', 'servicio', 'ayuda'];
    const userText = messages
        .filter(m => m.role === 'user')
        .map(m => m.content.map(c => c.text || '').join(' '))
        .join(' ')
        .toLowerCase();
    
    for (const keyword of spanishKeywords) {
        if (userText.includes(keyword)) {
            return 'es';
        }
    }
    return 'en';
}

export async function continueConversation(messages: MessageData[]): Promise<ConversationOutput> {
  return customerSupportFlow(messages);
}

const customerSupportFlow = ai.defineFlow(
  {
    name: 'customerSupportFlow',
    inputSchema: z.any(),
    outputSchema: z.string(),
  },
  async (messages) => {
    
    const lang = detectLanguage(messages);
    const systemPromptText = lang === 'es' 
        ? (await getSystemPromptEsAction()).prompt
        : (await getSystemPromptAction()).prompt;

    if (!systemPromptText) {
        return "I'm sorry, my instructions are not configured correctly. Please contact support.";
    }
    
    const prompt = ai.definePrompt({
        name: `customerSupportPrompt-${lang}`,
        system: systemPromptText,
        tools: [createLeadTool],
    });

    const { output } = await prompt(messages);
    return output?.text || "I'm sorry, I'm having trouble responding right now. Please try again in a moment.";
  }
);
